Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/.idea/.gitignore	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/.idea/misc.xml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="corretto-11" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/.idea/modules.xml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Methods/Add_Methods/AddAll/AddAll.iml" filepath="$PROJECT_DIR$/Methods/Add_Methods/AddAll/AddAll.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/Add_Methods/Add_Methods.iml" filepath="$PROJECT_DIR$/Methods/Add_Methods/Add_Methods.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/Clear_Method/Clear_Method.iml" filepath="$PROJECT_DIR$/Methods/Clear_Method/Clear_Method.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/Contains_Method/Contains_Method.iml" filepath="$PROJECT_DIR$/Methods/Contains_Method/Contains_Method.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/IsEmpty_Method/IsEmpty_Method.iml" filepath="$PROJECT_DIR$/Methods/IsEmpty_Method/IsEmpty_Method.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/Max_Method/Max_Method.iml" filepath="$PROJECT_DIR$/Methods/Max_Method/Max_Method.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Methods/Methods.iml" filepath="$PROJECT_DIR$/Methods/Methods.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/.idea/uiDesigner.xml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Methods/Methods.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/Methods.iml b/Methods/Methods.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/Methods.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/AddAll.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/AddAll.iml b/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/AddAll.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/AddAll.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/src/AddAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/src/AddAll.java b/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/src/AddAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/AddAll/src/AddAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+
+public class AddAll {
+    public static void main(String[] args) {
+
+        Collection<String> arrlist = new ArrayList<String>();
+
+        try
+        {
+            arrlist.add("Hi");
+
+            arrlist.add("Hemant");
+
+            System.out.println("arrlist before operation : " + arrlist);
+
+            Collections.addAll(arrlist, "1", "2", null);
+
+            //NullPointer Exception
+
+            // Collections.addAll(null, arrlist);
+
+            System.out.println("arrlist after operation : " + arrlist);
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (IllegalArgumentException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Add_Methods/Add_Methods.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/Add_Methods.iml b/Methods/src/Collection_Interface_Methods/Add_Methods/Add_Methods.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/Add_Methods.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayDequeAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayDequeAdd.java b/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayDequeAdd.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayDequeAdd.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,45 @@
+import java.util.*;
+
+public class ArrayDequeAdd {
+
+    public static void main(String[] args) {
+
+        Collection<String> de_que = new ArrayDeque<String>();
+
+        try
+        {
+            de_que.add("Hello");
+
+            de_que.add("I'm");
+
+            de_que.add("Hemant");
+
+            System.out.println("ArrayDeque: " + de_que);
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+
+        catch (IllegalArgumentException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (IllegalStateException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayListAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayListAdd.java b/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayListAdd.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/src/ArrayListAdd.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,49 @@
+import java.util.*;
+
+public class ArrayListAdd {
+
+    public static void main(String[] args) {
+
+        Collection<Integer> arrlist = new ArrayList<Integer>();
+
+        try
+        {
+            arrlist.add(1);
+
+            arrlist.add(2);
+
+            arrlist.add(3);
+
+            for (Integer number : arrlist)
+            {
+                System.out.println("Number = " + number);
+            }
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+
+        catch (IllegalArgumentException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (IllegalStateException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
+
Index: Methods/src/Collection_Interface_Methods/Add_Methods/src/LinkedListAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Add_Methods/src/LinkedListAdd.java b/Methods/src/Collection_Interface_Methods/Add_Methods/src/LinkedListAdd.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Add_Methods/src/LinkedListAdd.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,45 @@
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class LinkedListAdd {
+    public static void main(String[] args) {
+
+        Collection<String> list = new LinkedList<String>();
+
+        try
+        {
+            list.add("Hello");
+
+            list.add("I'm");
+
+            list.add("Hemant");
+
+            System.out.println("The new List is: " + list);
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+
+        catch (IllegalArgumentException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (IllegalStateException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Clear_Method/Clear_Method.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Clear_Method/Clear_Method.iml b/Methods/src/Collection_Interface_Methods/Clear_Method/Clear_Method.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Clear_Method/Clear_Method.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayDequeClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayDequeClear.java b/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayDequeClear.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayDequeClear.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,30 @@
+import java.util.*;
+
+public class ArrayDequeClear {
+
+    public static void main(String[] args) {
+
+        Collection<String> de_que = new ArrayDeque<String>();
+
+        try
+        {
+            de_que.add("Hello");
+
+            de_que.add("I'm");
+
+            de_que.add("Hemant");
+
+            System.out.println("ArrayDeque: " + de_que);
+
+            de_que.clear();
+
+            System.out.println("ArrayDeque: " + de_que);
+
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayListClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayListClear.java b/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayListClear.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Clear_Method/src/ArrayListClear.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,33 @@
+import java.util.*;
+
+public class ArrayListClear {
+
+    public static void main(String[] args) {
+
+        Collection<Integer> arrlist = new ArrayList<Integer>();
+
+        try
+        {
+            arrlist.add(1);
+
+            arrlist.add(2);
+
+            arrlist.add(3);
+
+            for (Integer number : arrlist)
+            {
+                System.out.println("Number = " + number);
+            }
+
+            arrlist.clear();
+
+            System.out.println("The new ArrayList is: " + arrlist);
+
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Clear_Method/src/LinkedListClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Clear_Method/src/LinkedListClear.java b/Methods/src/Collection_Interface_Methods/Clear_Method/src/LinkedListClear.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Clear_Method/src/LinkedListClear.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,30 @@
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class LinkedListClear {
+    public static void main(String[] args) {
+
+        Collection<String> list = new LinkedList<String>();
+
+        try
+        {
+            list.add("Hello");
+
+            list.add("I'm");
+
+            list.add("Hemant");
+
+            System.out.println("The new List is: " + list);
+
+            list.clear();
+
+            System.out.println("The new List is: " + list);
+
+        }
+
+        catch (UnsupportedOperationException e)
+        {
+            System.out.println(e.getMessage());
+        }
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/pom.xml b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/pom.xml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/pom.xml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>ContainsAll</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>11</maven.compiler.source>
+        <maven.compiler.target>11</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll.java b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,27 @@
+package org.example;
+
+import java.util.ArrayDeque;
+import java.util.Collection;
+
+public class ContainsAll {
+    public static void main(String[] args)
+    {
+        Collection<String> collection=new ArrayDeque<>();
+
+        collection.add("Himanshu");
+
+        collection.add("Sham");
+
+        collection.add("Rita");
+
+        Collection<String> collection1=new ArrayDeque<>();
+
+        collection1.add("Himanshu");
+
+        collection1.add("Sham");
+
+        collection1.add("Rita");
+
+        System.out.println(collection.containsAll(collection1));
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll_nullPointer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll_nullPointer.java b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll_nullPointer.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/src/main/java/org/example/ContainsAll_nullPointer.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,22 @@
+package org.example;
+import java.util.ArrayDeque;
+import java.util.Collection;
+public class ContainsAll_nullPointer {
+
+    public static void main(String[] args)
+    {
+        Collection<String> collection=new ArrayDeque<>();
+
+        collection.add("Himanshu");
+
+        collection.add("Sham");
+
+        collection.add("Rita");
+
+        Collection<Boolean> collection1=new ArrayDeque<>();
+
+        collection1.add(true); // if instead of true i used null give nullpointerException
+
+        System.out.println(collection.containsAll(collection1));
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Contains_Method/Contains_Method.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/Contains_Method.iml b/Methods/src/Collection_Interface_Methods/Contains_Method/Contains_Method.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/Contains_Method.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayDequeContains.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayDequeContains.java b/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayDequeContains.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayDequeContains.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,35 @@
+import java.util.*;
+
+public class ArrayDequeContains {
+
+    public static void main(String[] args) {
+
+        Collection<String> de_que = new ArrayDeque<String>();
+
+        try
+        {
+            de_que.add("Hello");
+
+            de_que.add("I'm");
+
+            de_que.add("Hemant");
+
+            System.out.println("ArrayDeque: " + de_que);
+
+            boolean result = de_que.contains("Hemant");
+
+            System.out.println("Is Hemant present in the List: " + result);
+
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayListContains.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayListContains.java b/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayListContains.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/src/ArrayListContains.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,39 @@
+import java.util.ArrayList;
+import java.util.Collection;
+public class ArrayListContains {
+
+    public static void main(String[] args) {
+
+        Collection<Integer> arrlist = new ArrayList<Integer>();
+
+        try
+        {
+            arrlist.add(1);
+
+            arrlist.add(2);
+
+            arrlist.add(3);
+
+            for (Integer number : arrlist)
+            {
+                System.out.println("Number = " + number);
+            }
+
+            boolean result = arrlist.contains(2);
+
+            System.out.println("Is Hemant present in the List: " + result);
+
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+    }
+}
+
Index: Methods/src/Collection_Interface_Methods/Contains_Method/src/LinkedListContains.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/src/LinkedListContains.java b/Methods/src/Collection_Interface_Methods/Contains_Method/src/LinkedListContains.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Contains_Method/src/LinkedListContains.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,35 @@
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class LinkedListContains {
+    public static void main(String[] args) {
+
+        Collection<String> list = new LinkedList<String>();
+
+        try
+        {
+            list.add("Hello");
+
+            list.add("I'm");
+
+            list.add("Hemant");
+
+            System.out.println("The new List is: " + list);
+
+            boolean result = list.contains("Hemant");
+
+            System.out.println("Is Hemant present in the List: " + result);
+
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println(e.getMessage());
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println(e.toString());
+        }
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Equals_Method/EqualMethods.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Equals_Method/EqualMethods.java b/Methods/src/Collection_Interface_Methods/Equals_Method/EqualMethods.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Equals_Method/EqualMethods.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,23 @@
+package Collection_Interface_Methods.Equals_Method;
+
+import java.util.Collection;
+import java.util.HashSet;
+public class EqualMethods {
+
+    public static void main(String[] args)
+    {
+        Collection<Integer> collection = new HashSet<>();
+
+        Collection<Integer> collection1 = new HashSet<>();
+
+        collection.add(5);
+
+        collection1.add(5);
+
+        collection1.add(8);
+
+        boolean val=collection.equals(collection1);
+
+        System.out.println("Equals methods will return : "+val);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/HashCode/HashCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/HashCode/HashCode.java b/Methods/src/Collection_Interface_Methods/HashCode/HashCode.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/HashCode/HashCode.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,19 @@
+package Collection_Interface_Methods.HashCode;
+
+import java.util.Collection;
+import java.util.HashSet;
+public class HashCode {
+
+    public static void main(String[] args)
+    {
+        Collection<String> collection = new HashSet<>();
+
+        collection.add("Reema");
+
+        collection.add("Rahul");
+
+        int val=collection.hashCode();
+
+        System.out.println("Hash Code : "+val);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/IsEmpty_Method/IsEmpty_Method.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/IsEmpty_Method/IsEmpty_Method.iml b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/IsEmpty_Method.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/IsEmpty_Method.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayDequeEmpty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayDequeEmpty.java b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayDequeEmpty.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayDequeEmpty.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,10 @@
+import java.util.*;
+
+public class ArrayDequeEmpty {
+    public static void main(String[] args) {
+
+        Collection<String> deque = new ArrayDeque<String>();
+
+        System.out.println("The new List is: " + deque.isEmpty());
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayListEmpty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayListEmpty.java b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayListEmpty.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/ArrayListEmpty.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,22 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class ArrayListEmpty {
+    public static void main(String[] args) {
+
+        Collection<String> list = new ArrayList<String>();
+
+        list.add("Hello");
+
+        list.add("I'm");
+
+        list.add("Hemant");
+
+        System.out.println("The new List is: " + list);
+
+        list.clear();
+
+        System.out.println("The new List is: " + list.isEmpty());
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/LinkedListEmpty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/LinkedListEmpty.java b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/LinkedListEmpty.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/IsEmpty_Method/src/LinkedListEmpty.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,21 @@
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class LinkedListEmpty {
+    public static void main(String[] args) {
+
+        Collection<String> list = new LinkedList<String>();
+
+        list.add("Hello");
+
+        list.add("I'm");
+
+        list.add("Hemant");
+
+        System.out.println("The new List is: " + list);
+
+        list.clear();
+
+        System.out.println("The new List is: " + list.isEmpty());
+    }
+}
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachMethodAnnonymousClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachMethodAnnonymousClass.java b/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachMethodAnnonymousClass.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachMethodAnnonymousClass.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,32 @@
+package Collection_Interface_Methods.Iterable_Interface_ForEachMethod;
+
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+public class ForEachMethodAnnonymousClass {
+
+    public static void main(String[] args)
+    {
+        List<String> data = new ArrayList<>();
+
+        data.add("New Delhi");
+
+        data.add("New York");
+
+        data.add("Mumbai");
+
+        data.add("London");
+
+        data.forEach(new Consumer<String>() {
+
+            @Override
+            public void accept(String t)
+            {
+
+                System.out.println(t);
+            }
+
+        });
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachWithConsumerInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachWithConsumerInterface.java b/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachWithConsumerInterface.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Iterable_Interface_ForEachMethod/ForEachWithConsumerInterface.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package Collection_Interface_Methods.Iterable_Interface_ForEachMethod;
+
+import java.util.*;
+import java.util.function.Consumer;
+class CityConsumer implements Consumer<String> {
+
+    @Override
+    public void accept(String t)
+    {
+        System.out.println(t);
+    }
+}
+public class ForEachWithConsumerInterface {
+
+    public static void main(String[] args)
+    {
+        List<String> data = new ArrayList<>();
+
+        data.add("New Delhi");
+
+        data.add("New York");
+
+        data.add("Mumbai");
+
+        data.add("London");
+
+        CityConsumer cityConsumer = new CityConsumer();
+
+        data.forEach(cityConsumer);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Iterator/Iterators.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Iterator/Iterators.java b/Methods/src/Collection_Interface_Methods/Iterator/Iterators.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Iterator/Iterators.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package Collection_Interface_Methods.Iterator;
+
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.concurrent.ConcurrentLinkedQueue;
+public abstract class Iterators {
+
+    static int i = 0;
+
+    public static void main(String[] args)
+    {
+        Collection<String> collection = new ConcurrentLinkedQueue<String>();
+
+        collection.add("Ram");
+
+        collection.add("Sham");
+
+        collection.add("Mira");
+
+        collection.add("Rajesh");
+
+        Iterator<String> iterator = collection.iterator();
+
+        while (iterator.hasNext())
+        {
+            System.out.println(i++);
+
+            System.out.println(i++ + "." + iterator.next());
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Max_Method/Max_Method.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Max_Method/Max_Method.iml b/Methods/src/Collection_Interface_Methods/Max_Method/Max_Method.iml
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Max_Method/Max_Method.iml	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Methods/src/Collection_Interface_Methods/Max_Method/src/MaxClassCast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxClassCast.java b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxClassCast.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxClassCast.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,28 @@
+import java.util.*;
+
+public class MaxClassCast {
+    public static void main(String[] args) {
+        try
+        {
+            List<String> list = new LinkedList<String>();
+
+            Object i = Integer.valueOf(42);
+
+            list.add("Hello");
+            
+            list.add((String)i);
+
+            System.out.println("Max value is: " + Collections.max(list));
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+
+        catch (NoSuchElementException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Max_Method/src/MaxMethod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxMethod.java b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxMethod.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxMethod.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,30 @@
+import java.util.*;
+
+public class MaxMethod {
+    public static void main(String[] args) {
+        try
+        {
+            List<Integer> list = new LinkedList<Integer>();
+
+            list.add(-1);
+
+            list.add(4);
+
+            list.add(-5);
+
+            list.add(1);
+
+            System.out.println("Max value is: " + Collections.max(list));
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+
+        catch (NoSuchElementException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Max_Method/src/MaxNoSuchElement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxNoSuchElement.java b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxNoSuchElement.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Max_Method/src/MaxNoSuchElement.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,22 @@
+import java.util.*;
+
+public class MaxNoSuchElement {
+    public static void main(String[] args) {
+        try
+        {
+            List<String> list = new LinkedList<String>();
+
+            System.out.println("Max value is: " + Collections.max(list));
+        }
+
+        catch (ClassCastException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+
+        catch (NoSuchElementException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Remove/Remove.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Remove/Remove.java b/Methods/src/Collection_Interface_Methods/Remove/Remove.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Remove/Remove.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,26 @@
+package Collection_Interface_Methods.Remove;
+
+import java.util.ArrayDeque;
+import java.util.Collection;
+public class Remove {
+
+    public static void main(String[] args)
+    {
+        Collection<String> collection = new ArrayDeque<String>() {};
+
+        collection.add("Reema");
+
+        collection.add("Geetanajli");
+
+        collection.add(null);
+
+        for (String i:collection)
+        {
+            System.out.println(i);
+        }
+
+        boolean val=collection.remove("ABC");
+
+        System.out.println("Remove method will return : "+val);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Remove/RemoveAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Remove/RemoveAll.java b/Methods/src/Collection_Interface_Methods/Remove/RemoveAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Remove/RemoveAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,36 @@
+package Collection_Interface_Methods.Remove;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.ConcurrentLinkedQueue;
+public class RemoveAll {
+
+    public static void main(String[] args)
+    {
+        Collection<Integer> collection = new ConcurrentLinkedQueue<Integer>();
+
+        List<Integer> list = new ArrayList<Integer>();
+
+        for (int i=1;i<21;i++)
+        {
+            collection.add(i);
+        }
+
+        System.out.println("Total no : "+ collection);
+
+        for (int i=1;i<21;i++)
+        {
+            int j=i%2;
+
+            if (j != 0)
+            {
+                list.add(i);
+            }
+        }
+
+        collection.removeAll(list);
+
+        System.out.println(" Table of 2 : "+collection);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Remove/RemoveIf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Remove/RemoveIf.java b/Methods/src/Collection_Interface_Methods/Remove/RemoveIf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Remove/RemoveIf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,27 @@
+package Collection_Interface_Methods.Remove;
+
+import java.util.Collection;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.function.Predicate;
+public class RemoveIf {
+
+    public static void main(String[] args)
+    {
+        Collection<Character> collection = new ConcurrentLinkedQueue<Character>();
+
+        char c;
+
+        for(c='A';c<='Z';++c)
+        {
+            collection.add(c);
+        }
+
+        System.out.println("Albabets : "+ collection);
+
+        Predicate<Character> pr= a->(a!='A'&& a!='E'&& a!='I'&& a!='O'&& a!='U' );
+
+        collection.removeIf(pr );
+
+        System.out.println(" Vowels = "+collection);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/RetainALl/RetainAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/RetainALl/RetainAll.java b/Methods/src/Collection_Interface_Methods/RetainALl/RetainAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/RetainALl/RetainAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,38 @@
+package Collection_Interface_Methods.RetainALl;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.ConcurrentLinkedQueue;
+public class RetainAll {
+
+    public static void main(String[] args)
+    {
+        Collection<Character> collection = new ConcurrentLinkedQueue<Character>();
+
+        char i;
+
+        for(i='a';i<='z';++i)
+        {
+            collection.add(i);
+        }
+
+        System.out.println("collection : "+collection);
+
+        List<Character> list = new ArrayList<Character>();
+
+        list.add('a');
+
+        list.add('e');
+
+        list.add('i');
+
+        list.add('o');
+
+        list.add('u');
+
+        collection.retainAll(list);
+
+        System.out.println("Vowels : "+collection);
+    }
+}
Index: Methods/src/Collection_Interface_Methods/Size/Size.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/Size/Size.java b/Methods/src/Collection_Interface_Methods/Size/Size.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/Size/Size.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,23 @@
+package Collection_Interface_Methods.Size;
+
+import java.util.Collection;
+import java.util.HashSet;
+public class Size {
+
+    public static void main(String[] args)
+    {
+        Collection<Integer> collection = new HashSet<>();
+
+        collection.add(34);
+
+        collection.add(12);
+
+        collection.add(45);
+
+        System.out.print("The elements in Collection : ");
+
+        System.out.println(collection);
+
+        System.out.println("Size of the collection "+collection.size());
+    }
+}
Index: Methods/src/Collection_Interface_Methods/SplitIterator/SplitIterators.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/SplitIterator/SplitIterators.java b/Methods/src/Collection_Interface_Methods/SplitIterator/SplitIterators.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/SplitIterator/SplitIterators.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,26 @@
+package Collection_Interface_Methods.SplitIterator;
+
+import java.util.Collection;
+import java.util.Spliterator;
+import java.util.concurrent.ConcurrentLinkedQueue;
+public class SplitIterators {
+
+    static int i=1;
+
+    public static void main(String[] args)
+    {
+        Collection<Character> collection = new ConcurrentLinkedQueue();
+
+        for (char i='A';i<='Z';i++)
+        {
+            collection.add(i);
+        }
+
+        System.out.print("Values : ");
+
+        Spliterator<Character>str = collection.spliterator();
+
+        while(str.tryAdvance((n)->System.out.print(n+" ")));
+
+    }
+}
Index: Methods/src/Collection_Interface_Methods/ToArray/ToArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Collection_Interface_Methods/ToArray/ToArray.java b/Methods/src/Collection_Interface_Methods/ToArray/ToArray.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Collection_Interface_Methods/ToArray/ToArray.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package Collection_Interface_Methods.ToArray;
+
+import java.util.Collection;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+public class ToArray {
+
+    public static void main(String[] args)
+    {
+        Collection<Integer>collection= new ConcurrentLinkedQueue();
+
+        System.out.println("List of even numbers in our collection.");
+
+        for (int i=1;i<=10;i++)
+        {
+            collection.add(i);
+        }
+
+        Integer[] a = new Integer[5];
+
+        Integer[] b =  collection.toArray(a);
+
+        for (int i = 0; i <b.length; i++)
+        {
+            if (b[i] %2==0)
+            {
+                System.out.println(b[i]+" ");
+            }
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListAdd.java b/Methods/src/LinkedList/LinkedListAdd.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListAdd.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,28 @@
+package LinkedList;
+
+import java.util.*;
+
+public class LinkedListAdd
+{
+    public static void main(String args[])
+    {
+        LinkedList<String> linkedlist=new LinkedList<String>();
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Vijay");
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Ajay");
+
+        linkedlist.add(4,"Hemant");
+
+        Iterator<String> itr=linkedlist.iterator();
+
+        while(itr.hasNext())
+        {
+            System.out.println(itr.next());
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListAddAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListAddAll.java b/Methods/src/LinkedList/LinkedListAddAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListAddAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,38 @@
+package LinkedList;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.LinkedList;
+
+public class LinkedListAddAll {
+
+    public static void main(String args[])
+    {
+        LinkedList<String> list = new LinkedList<String>();
+
+        list.add("Hi");
+
+        list.add("Hello");
+
+        list.add(null);
+
+        list.add("20");
+
+        LinkedList<String> list1 = new LinkedList<String>();
+
+        list1.add("1");
+
+        list1.add("2");
+
+        list1.add("3");
+
+        System.out.println("The LinkedList is: " + list);
+
+        list.addAll(list1);
+
+        list.addAll(3, list1);
+
+        System.out.println("The new linked list is: " + list);
+
+    }
+}
Index: Methods/src/LinkedList/LinkedListAddFirst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListAddFirst.java b/Methods/src/LinkedList/LinkedListAddFirst.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListAddFirst.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,33 @@
+package LinkedList;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+
+public class LinkedListAddFirst {
+
+    public static void main(String args[])
+    {
+        LinkedList<String> linkedlist=new LinkedList<String>();
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Vijay");
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Ajay");
+
+        linkedlist.add(4,"Hemant");
+
+        linkedlist.addFirst("First");
+
+        linkedlist.addFirst("At");
+
+        Iterator<String> itr=linkedlist.iterator();
+
+        while(itr.hasNext())
+        {
+            System.out.println(itr.next());
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListAddLast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListAddLast.java b/Methods/src/LinkedList/LinkedListAddLast.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListAddLast.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,33 @@
+package LinkedList;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+
+public class LinkedListAddLast {
+
+    public static void main(String args[])
+    {
+        LinkedList<String> linkedlist=new LinkedList<String>();
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Vijay");
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Ajay");
+
+        linkedlist.add(4,"Hemant");
+
+        linkedlist.addLast("At");
+
+        linkedlist.addLast("Last");
+
+        Iterator<String> itr=linkedlist.iterator();
+
+        while(itr.hasNext())
+        {
+            System.out.println(itr.next());
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListClear.java b/Methods/src/LinkedList/LinkedListClear.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListClear.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,35 @@
+package LinkedList;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+
+public class LinkedListClear {
+
+    public static void main(String args[]) {
+        LinkedList<String> linkedlist = new LinkedList<String>();
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Vijay");
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Ajay");
+
+        Iterator<String> itr=linkedlist.iterator();
+
+        while(itr.hasNext())
+        {
+            System.out.println(itr.next());
+        }
+
+        linkedlist.clear();
+
+        Iterator<String> itr1=linkedlist.iterator();
+
+        while(itr1.hasNext())
+        {
+            System.out.println(itr1.next());
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListClone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListClone.java b/Methods/src/LinkedList/LinkedListClone.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListClone.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,30 @@
+package LinkedList;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+
+public class LinkedListClone {
+
+    public static void main(String args[])
+    {
+        LinkedList<String> linkedlist = new LinkedList<String>();
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Vijay");
+
+        linkedlist.add("Ravi");
+
+        linkedlist.add("Ajay");
+
+        System.out.println("First LinkedList:" + linkedlist);
+
+        LinkedList sec_list = new LinkedList();
+
+        sec_list = (LinkedList) linkedlist.clone();
+
+        sec_list.add("Hemant");
+
+        System.out.println("Second LinkedList is:" + linkedlist);
+    }
+}
Index: Methods/src/LinkedList/LinkedListContains.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListContains.java b/Methods/src/LinkedList/LinkedListContains.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListContains.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,29 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListContains {
+
+    public static void main(String args[])
+    {
+        LinkedList<StringBuffer> list = new LinkedList<StringBuffer>();
+
+        list.add(new StringBuffer("10"));
+
+        list.add(new StringBuffer("20"));
+
+        list.add(null);
+
+        LinkedList<String> list1 = new LinkedList<>();
+
+        list1.add(null);
+
+        System.out.println("LinkedList:" + list);
+
+        System.out.println("\nDoes the List contains 'Hello': " + list.contains(null));
+
+        System.out.println("Does the List contains '20': " + list.contains("20"));
+
+        System.out.println(list1.contains(null));
+    }
+}
Index: Methods/src/LinkedList/LinkedListDescendingIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListDescendingIterator.java b/Methods/src/LinkedList/LinkedListDescendingIterator.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListDescendingIterator.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,35 @@
+package LinkedList;
+
+import java.util.Iterator;
+import java.util.LinkedList;
+
+public class LinkedListDescendingIterator {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("A");
+
+            list.add("B");
+
+            list.add("C");
+
+            System.out.println("LinkedList:" + list);
+
+            Iterator x = list.descendingIterator();
+
+            while (x.hasNext())
+            {
+                System.out.println("Value is : " + x.next());
+            }
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListGet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListGet.java b/Methods/src/LinkedList/LinkedListGet.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListGet.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,25 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListGet {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("A");
+
+            list.add("B");
+
+            System.out.println(list.get(0));
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListGetFirst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListGetFirst.java b/Methods/src/LinkedList/LinkedListGetFirst.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListGetFirst.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,32 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListGetFirst {
+
+    public static void main(String[] args)
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("Geeks");
+
+            list.add("4");
+
+            list.add("Geeks");
+
+            list.add("8");
+
+            System.out.println("The elements in List are : " + list);
+
+            System.out.println("Element at 1st index is : " + list.getFirst());
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+    }
+}
Index: Methods/src/LinkedList/LinkedListGetLast.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListGetLast.java b/Methods/src/LinkedList/LinkedListGetLast.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListGetLast.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,32 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListGetLast {
+
+    public static void main(String[] args)
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("Geeks");
+
+            list.add("4");
+
+            list.add("Geeks");
+
+            list.add("8");
+
+            System.out.println("The elements in List are : " + list);
+
+            System.out.println("Element at last index is : " + list.getLast());
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+    }
+}
Index: Methods/src/LinkedList/LinkedListIndexOf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListIndexOf.java b/Methods/src/LinkedList/LinkedListIndexOf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListIndexOf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListIndexOf {
+
+    public static void main(String args[])
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("Geeks");
+
+            list.add("for");
+
+            list.add("Geeks");
+
+            list.add("10");
+
+            list.add("20");
+
+            System.out.println("LinkedList:" + list);
+
+            System.out.println("The first occurrence of Geeks is at index:" + list.indexOf("Geeks"));
+
+            System.out.println("The first occurrence of 10 is at index: " + list.indexOf("10"));
+
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+
+}
Index: Methods/src/LinkedList/LinkedListLastIndexOf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListLastIndexOf.java b/Methods/src/LinkedList/LinkedListLastIndexOf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListLastIndexOf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListLastIndexOf {
+
+    public static void main(String args[]) {
+        try {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("Geeks");
+
+            list.add("for");
+
+            list.add("Geeks");
+
+            list.add("10");
+
+            list.add("20");
+
+            System.out.println("LinkedList:" + list);
+
+            System.out.println("Last occurrence of Geeks is at index: " + list.lastIndexOf("Geeks"));
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/LinkedList/LinkedListListIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListListIterator.java b/Methods/src/LinkedList/LinkedListListIterator.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListListIterator.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,42 @@
+package LinkedList;
+
+import java.util.LinkedList;
+import java.util.ListIterator;
+
+public class LinkedListListIterator
+{
+    public static void main(String args[])
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<String>();
+
+            list.add("Hello");
+
+            list.add("Hi");
+
+            list.add("Hemant");
+
+            list.add("10");
+
+            list.add("20");
+
+            System.out.println("LinkedList:" + list);
+
+            ListIterator list_Iter = list.listIterator(2);
+
+            System.out.println("The list is as follows:");
+
+            while(list_Iter.hasNext())
+            {
+                System.out.println(list_Iter.next());
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+    }
+}
Index: Methods/src/LinkedList/LinkedListOffer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/LinkedList/LinkedListOffer.java b/Methods/src/LinkedList/LinkedListOffer.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/LinkedList/LinkedListOffer.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package LinkedList;
+
+import java.util.LinkedList;
+
+public class LinkedListOffer {
+
+    public static void main(String[] args)
+    {
+        try
+        {
+            LinkedList<String> list = new LinkedList<>();
+
+            list.add("Hi");
+
+            list.add("Hello");
+
+            list.add("Hemant");
+
+            System.out.println("The initial Linked list is : " + list);
+
+            list.offer(null);
+
+            list.offerFirst("Yoo");
+
+            list.offerLast("Bye");
+
+            System.out.println("LinkedList after insertion using offer() : " + list);
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListAddWithIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListAddWithIndex.java b/Methods/src/ListDataStructure/ArrayListAddWithIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListAddWithIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,26 @@
+package ListDataStructure;
+
+import java.io.*;
+import java.util.ArrayList;
+public class ArrayListAddWithIndex {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arrlist = new ArrayList<Integer>(5);
+
+        arrlist.add(10);
+
+        arrlist.add(22);
+
+        arrlist.add(30);
+
+        arrlist.add(40);
+
+        arrlist.add(3, 35);
+
+        for (Integer number : arrlist)
+        {
+            System.out.println("Number = " + number);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListAddWithoutIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListAddWithoutIndex.java b/Methods/src/ListDataStructure/ArrayListAddWithoutIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListAddWithoutIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListAddWithoutIndex {
+
+    public static void main(String[] args)
+    {
+
+        // create an empty array list with an initial capacity
+        ArrayList<Integer> arrlist = new ArrayList<Integer>(5);
+
+        // use add() method to add elements in the list
+        arrlist.add(15);
+        arrlist.add(20);
+        arrlist.add(25);
+
+        // prints all the elements available in list
+        for (Integer number : arrlist)
+        {
+            System.out.println("Number = " + number);
+        }
+    }
+
+//    private void add(E e, Object[] elementData, int s) {
+//        if (s == elementData.length)
+//            elementData = grow();
+//        elementData[s] = e;
+//        size = s + 1;
+//    }
+//
+//    public boolean add(E e) {
+//        modCount++;
+//        add(e, elementData, size);
+//        return true;
+//    }
+}
Index: Methods/src/ListDataStructure/ArrayListAddallWithIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListAddallWithIndex.java b/Methods/src/ListDataStructure/ArrayListAddallWithIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListAddallWithIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,49 @@
+package ListDataStructure;
+
+// Java program to illustrate
+// boolean addAll(int index, Collection c)
+import java.io.*;
+import java.util.ArrayList;
+
+public class ArrayListAddallWithIndex
+{
+    public static void main(String args[])
+    {
+
+        ArrayList<Integer> arrlist = new ArrayList<Integer>(5);
+
+        arrlist.add(12);
+
+        arrlist.add(20);
+
+        arrlist.add(45);
+
+        System.out.println("Printing list1:");
+
+        for (Integer number : arrlist)
+            System.out.println("Number = " + number);
+
+        ArrayList<Integer> arrlist2 = new ArrayList<Integer>(5);
+
+        arrlist2.add(25);
+
+        arrlist2.add(30);
+
+        arrlist2.add(31);
+
+        arrlist2.add(35);
+
+        System.out.println("Printing list2:");
+
+        for (Integer number : arrlist2)
+            System.out.println("Number = " + number);
+
+        arrlist.addAll(2, arrlist2);
+
+        System.out.println("Printing all the elements");
+
+        for (Integer number : arrlist)
+            System.out.println("Number = " + number);
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListAddallWithoutIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListAddallWithoutIndex.java b/Methods/src/ListDataStructure/ArrayListAddallWithoutIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListAddallWithoutIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,65 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListAddallWithoutIndex
+{
+    public static void main(String args[])
+    {
+        ArrayList arr = new ArrayList();
+
+        arr.add("1");
+
+        arr.add(1);
+
+        ArrayList arr1 = new ArrayList();
+
+        arr1.add("2");
+
+        arr1.add(2);
+
+        System.out.println(arr.addAll(arr1));
+
+        // ************************************************
+
+        ArrayList<Integer> arrlist1 = new ArrayList<Integer>(5);
+
+        arrlist1.add(12);
+
+        arrlist1.add(20);
+
+        arrlist1.add(45);
+
+        arrlist1.add(null);
+
+        System.out.println("Printing list1:");
+
+        for (Integer number : arrlist1)
+        {
+            System.out.println("Number = " + number);
+        }
+
+        ArrayList<Integer> arrlist2 = new ArrayList<Integer>(5);
+
+        arrlist2.add(25);
+
+        arrlist2.add(30);
+
+        arrlist2.add(31);
+
+        arrlist2.add(35);
+
+        System.out.println("Printing list2:");
+
+        for (Integer number : arrlist2)
+            System.out.println("Number = " + number);
+
+        arrlist1.addAll(arrlist2);
+
+        System.out.println("Printing all the elements");
+
+        for (Integer number : arrlist1)
+            System.out.println("Number = " + number);
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListClear.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListClear.java b/Methods/src/ListDataStructure/ArrayListClear.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListClear.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,25 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListClear {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(4);
+
+        arr.add(1);
+
+        arr.add(2);
+
+        arr.add(3);
+
+        arr.add(4);
+
+        System.out.println("The list initially: " + arr);
+
+        arr.clear();
+
+        System.out.println("The list after using clear() method: " + arr);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListCloneWithDeepCopy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListCloneWithDeepCopy.java b/Methods/src/ListDataStructure/ArrayListCloneWithDeepCopy.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListCloneWithDeepCopy.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,55 @@
+package ListDataStructure;
+
+class Test1 {
+    int x, y;
+}
+
+class Test3 implements Cloneable {
+    int a, b;
+
+    Test1 c = new Test1();
+
+    public Object clone() throws CloneNotSupportedException
+    {
+        Test3 t = (Test3)super.clone();
+
+        t.c = new Test1();
+
+        t.c.x = c.x;
+
+        t.c.y = c.y;
+
+        return t;
+    }
+}
+
+public class ArrayListCloneWithDeepCopy
+{
+    public static void main(String args[]) throws CloneNotSupportedException
+    {
+        Test3 t1 = new Test3();
+
+        t1.a = 10;
+
+        t1.b = 20;
+
+        t1.c.x = 30;
+
+        t1.c.y = 40;
+
+        Test3 t3 = (Test3)t1.clone();
+
+        t3.a = 100;
+
+        t3.c.x = 300;
+
+        System.out.println(t1.a + " " + t1.b + " " + t1.c.x + " " + t1.c.y);
+
+        System.out.println(t3.a + " " + t3.b + " " + t3.c.x + " " + t3.c.y);
+
+        System.out.println(t1.hashCode());
+
+        System.out.println(t3.hashCode());
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListCloneWithShallowCopy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListCloneWithShallowCopy.java b/Methods/src/ListDataStructure/ArrayListCloneWithShallowCopy.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListCloneWithShallowCopy.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,48 @@
+package ListDataStructure;
+
+// clone() method does create a completely new object with a different hashCode value.
+
+class Test {
+    int x, y;
+}
+class Test2 implements Cloneable {
+    int a;
+    int b;
+    Test c = new Test();
+
+    public Object clone() throws CloneNotSupportedException
+    {
+        return super.clone();
+    }
+}
+
+public class ArrayListCloneWithShallowCopy
+{
+    public static void main(String args[]) throws CloneNotSupportedException
+    {
+        Test2 t1 = new Test2();
+
+        t1.a = 10;
+
+        t1.b = 20;
+
+        t1.c.x = 30;
+
+        t1.c.y = 40;
+
+        Test2 t2 = (Test2)t1.clone();
+
+        t2.a = 100;
+
+        t2.c.x = 300;
+
+        System.out.println(t1.a + " " + t1.b + " " + t1.c.x + " " + t1.c.y);
+
+        System.out.println(t2.a + " " + t2.b + " " + t2.c.x + " " + t2.c.y);
+
+        System.out.println(t1.hashCode());
+
+        System.out.println(t2.hashCode());
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListContains.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListContains.java b/Methods/src/ListDataStructure/ArrayListContains.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListContains.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListContains {
+
+    public static void main(String[] args)
+    {
+        ArrayList<StringBuffer> arr = new ArrayList<>(4);
+
+        arr.add(null);
+
+        arr.add(new StringBuffer("Hemant"));
+
+        boolean ans = arr.contains("Hemant");
+
+        ArrayList<String> arr1 = new ArrayList<>();
+
+        arr1.add(null);
+
+        if (ans)
+            System.out.println("The list contains Hemant");
+        else
+            System.out.println("The list does not contains null");
+
+        ans = arr.contains("coding");
+
+        if (ans)
+            System.out.println("The list contains coding");
+        else
+            System.out.println("The list does not contains coding");
+
+        System.out.println(arr.contains(null));
+
+        System.out.println(arr1.contains(null));
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListEnsureCapacity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListEnsureCapacity.java b/Methods/src/ListDataStructure/ArrayListEnsureCapacity.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListEnsureCapacity.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,33 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListEnsureCapacity {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<Integer> arrlist = new ArrayList<Integer>();
+
+            arrlist.add(10);
+
+            arrlist.add(20);
+
+            arrlist.add(30);
+
+            arrlist.add(40);
+
+            System.out.println("ArrayList: " + arrlist);
+
+            arrlist.ensureCapacity(5000);
+
+            System.out.println("ArrayList can now" + " surely store upto" + " 5000 elements.");
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListEquals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListEquals.java b/Methods/src/ListDataStructure/ArrayListEquals.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListEquals.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,32 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListEquals {
+
+    public static void main(String[] args)
+    {
+        ArrayList<String> bags = new ArrayList<String>();
+
+        bags.add("pen");
+
+        bags.add("pencil");
+
+        bags.add("paper");
+
+        ArrayList<String> boxes = new ArrayList<String>();
+
+        boxes.add("pen");
+
+        boxes.add("paper");
+
+        boxes.add("pencil");
+
+        System.out.println("Bags Contains :" + bags);
+
+        System.out.println("Boxes Contains :" + boxes);
+
+        System.out.println(bags.equals(boxes));
+
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListForEach.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListForEach.java b/Methods/src/ListDataStructure/ArrayListForEach.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListForEach.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,24 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListForEach {
+
+    public static void main(String[] args)
+    {
+        ArrayList<String> students = new ArrayList<String>();
+
+        students.add("Ram");
+
+        students.add("Mohan");
+
+        students.add("Sohan");
+
+        students.add("Rabi");
+
+        System.out.println("list of Students:");
+
+        students.forEach((n) -> System.out.println(n));
+    }
+
+}
Index: Methods/src/ListDataStructure/ArrayListGet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListGet.java b/Methods/src/ListDataStructure/ArrayListGet.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListGet.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,25 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListGet {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(4);
+
+        arr.add(10);
+
+        arr.add(20);
+
+        arr.add(30);
+
+        arr.add(40);
+
+        System.out.println("List: " + arr);
+
+        int element = arr.get(2);
+
+        System.out.println("the element at index 2 is " + element);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListHashCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListHashCode.java b/Methods/src/ListDataStructure/ArrayListHashCode.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListHashCode.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,18 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListHashCode {
+
+    public static void main(String[] args)
+    {
+
+        ArrayList<String> bags = new ArrayList<String>();
+
+        bags.add("pen");
+
+        bags.add("pencil");
+
+        System.out.println(bags.hashCode());
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListIndexOf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListIndexOf.java b/Methods/src/ListDataStructure/ArrayListIndexOf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListIndexOf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,34 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListIndexOf {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(5);
+
+        arr.add(1);
+
+        arr.add(2);
+
+        arr.add(3);
+
+        arr.add(null);
+
+        arr.add(4);
+
+        System.out.print("The initial values in ArrayList are : ");
+
+        for (Integer value : arr)
+        {
+            System.out.print(value);
+
+            System.out.print(" ");
+        }
+
+        int pos =arr.indexOf(3);
+
+        System.out.println("\nThe element 3 is at index : " + pos);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListIsEmpty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListIsEmpty.java b/Methods/src/ListDataStructure/ArrayListIsEmpty.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListIsEmpty.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListIsEmpty {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(5);
+
+        arr.add(null);
+
+        boolean ans = arr.isEmpty();
+
+        if (ans == true)
+            System.out.println("The ArrayList is empty");
+
+        else
+            System.out.println("The ArrayList is not empty " + arr.size());
+
+        arr.add(1);
+
+        ans = arr.isEmpty();
+
+        if (ans == true)
+            System.out.println("The ArrayList is empty");
+
+        else
+            System.out.println("The ArrayList is not empty");
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListLastIndexOf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListLastIndexOf.java b/Methods/src/ListDataStructure/ArrayListLastIndexOf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListLastIndexOf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,43 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListLastIndexOf {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(7);
+
+        arr.add(10);
+
+        arr.add(20);
+
+        arr.add(30);
+
+        arr.add(40);
+
+        arr.add(30);
+
+        arr.add(30);
+
+        arr.add(40);
+
+        System.out.println("The list initially " + arr);
+
+        int element = arr.lastIndexOf(30);
+
+        if (element != -1)
+            System.out.println("the lastIndexof of" + " 30 is " + element);
+
+        else
+            System.out.println("30 is not present in" + " the list");
+
+        element = arr.lastIndexOf(100);
+
+        if (element != -1)
+            System.out.println("the lastIndexof of 100" + " is " + element);
+
+        else
+            System.out.println("100 is not present in" + " the list");
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListRemoveAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListRemoveAll.java b/Methods/src/ListDataStructure/ArrayListRemoveAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListRemoveAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,41 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListRemoveAll {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<Integer> arrlist1 = new ArrayList<Integer>();
+
+            arrlist1.add(1);
+
+            arrlist1.add(2);
+
+            arrlist1.add(null);
+
+            arrlist1.add(4);
+
+            arrlist1.add(5);
+
+            System.out.println("ArrayList before " + "removeAll() operation : " + arrlist1);
+
+            ArrayList<Integer> arrlist2 = null;
+
+            System.out.println("Collection Elements" + " to be removed : " + arrlist2);
+
+            System.out.println("\nTrying to pass " + "null as a specified element\n");
+
+            arrlist1.removeAll(arrlist2);
+
+            System.out.println("ArrayList after " + "removeAll() operation : " + arrlist1);
+        }
+
+        catch (NullPointerException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListRemoveIf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListRemoveIf.java b/Methods/src/ListDataStructure/ArrayListRemoveIf.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListRemoveIf.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,26 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListRemoveIf {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> Numbers = new ArrayList<Integer>();
+
+        Numbers.add(23);
+
+        Numbers.add(32);
+
+        Numbers.add(45);
+
+        Numbers.add(63);
+
+        Numbers.removeIf(n -> (n % 3 == 0));
+
+        for (int i : Numbers)
+        {
+            System.out.println(i);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListRemoveWithIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListRemoveWithIndex.java b/Methods/src/ListDataStructure/ArrayListRemoveWithIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListRemoveWithIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,23 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListRemoveWithIndex {
+
+    public static void main(String[] args) {
+
+        ArrayList<String> myAlist = new ArrayList<String>();
+
+        myAlist.add("Geeks");
+
+        myAlist.add("Practice");
+
+        myAlist.add("Quiz");
+
+        System.out.println("Original ArrayList : " + myAlist);
+
+        myAlist.remove(2);
+
+        System.out.println("Modified ArrayList : " + myAlist);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListRemoveWithObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListRemoveWithObject.java b/Methods/src/ListDataStructure/ArrayListRemoveWithObject.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListRemoveWithObject.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,27 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
+
+public class ArrayListRemoveWithObject {
+
+    public static void main(String[] args)
+    {
+        ArrayList<String> myAlist = new ArrayList<String>();
+
+        myAlist.add("Geeks");
+
+        myAlist.add("Practice");
+
+        myAlist.add(new String("Quiz"));
+
+        myAlist.add(new String("Quiz"));
+
+        System.out.println("Original ArrayList : " + myAlist);
+
+        myAlist.remove("Quiz");
+
+        System.out.println("Modified ArrayList : " + myAlist);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListRetainAll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListRetainAll.java b/Methods/src/ListDataStructure/ArrayListRetainAll.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListRetainAll.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,39 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListRetainAll {
+
+    public static void main(String[] args)
+    {
+        ArrayList<String> bags = new ArrayList<String>();
+
+        bags.add("pen");
+
+        bags.add("pencil");
+
+        bags.add("paper");
+
+        ArrayList<String> boxes = new ArrayList<String>();
+
+        boxes.add("pen");
+
+        boxes.add("paper");
+
+        boxes.add("books");
+
+        boxes.add("rubber");
+
+        System.out.println("Bags Contains :" + bags);
+
+        System.out.println("Boxes Contains :" + boxes);
+
+        boxes.retainAll(bags);
+
+        System.out.println("\nAfter Applying retainAll()"+ " method to Boxes\n");
+
+        System.out.println("Bags Contains :" + bags);
+
+        System.out.println("Boxes Contains :" + boxes);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListSet.java b/Methods/src/ListDataStructure/ArrayListSet.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListSet.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListSet {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<Integer> arrlist = new ArrayList<Integer>();
+
+            arrlist.add(1);
+
+            arrlist.add(2);
+
+            arrlist.add(3);
+
+            arrlist.add(4);
+
+            arrlist.add(5);
+
+            System.out.println("Before operation: " + arrlist);
+
+            int i = arrlist.set(3, 30);
+
+            System.out.println("After operation: " + arrlist);
+
+            System.out.println("Replaced element: " + i);
+        }
+
+        catch (IndexOutOfBoundsException e)
+        {
+            System.out.println("Exception thrown: " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListSize.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListSize.java b/Methods/src/ListDataStructure/ArrayListSize.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListSize.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListSize {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<String> arrlist = new ArrayList<String>(null);
+
+            arrlist.add("A");
+
+            arrlist.add("B");
+
+            arrlist.add("C");
+
+            System.out.println("Before operation: " + arrlist);
+
+            int size = arrlist.size();
+
+            System.out.println("Size of list = " + size);
+        }
+
+        catch (IndexOutOfBoundsException e)
+        {
+            System.out.println("Exception thrown: " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListSort.java b/Methods/src/ListDataStructure/ArrayListSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,30 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+public class ArrayListSort {
+
+    public static void main(String[] args)
+    {
+
+        ArrayList<String> bags = new ArrayList<String>();
+
+        bags.add("pen");
+
+        bags.add("pencil");
+
+        ArrayList<String> boxes = new ArrayList<String>(4);
+
+        boxes.add("pen");
+
+        boxes.add(null);
+
+        boxes.add("paper");
+
+        Collections.sort(boxes);
+
+        System.out.println(boxes);
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListSplitIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListSplitIterator.java b/Methods/src/ListDataStructure/ArrayListSplitIterator.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListSplitIterator.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,28 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+import java.util.Spliterator;
+
+public class ArrayListSplitIterator {
+
+    public static void main(String[] args)
+    {
+        ArrayList<String> list = new ArrayList<String>();
+
+        list.add("abc@geeksforgeeks.org");
+
+        list.add("user@geeksforgeeks.org");
+
+        list.add("pqr@geeksforgeeks.org");
+
+        list.add("random@geeksforgeeks.org");
+
+        list.add("randomuser@geeksforgeeks.org");
+
+        Spliterator<String> emails = list.spliterator();
+
+        System.out.println("list of Emails:");
+
+        emails.forEachRemaining((n) -> System.out.println(n));
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListSubList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListSubList.java b/Methods/src/ListDataStructure/ArrayListSubList.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListSubList.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,38 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListSubList {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<String> arrlist = new ArrayList<String>();
+
+            arrlist.add("A");
+
+            arrlist.add("B");
+
+            arrlist.add("C");
+
+            arrlist.add("D");
+
+            arrlist.add("E");
+
+            System.out.println("Original arrlist: " + arrlist);
+
+            ArrayList<String> arrlist2 = (ArrayList<String>) arrlist.subList(2, 4);
+
+            System.out.println("Sublist of arrlist: " + arrlist2);
+        }
+
+        catch (IndexOutOfBoundsException e) {
+            System.out.println("Exception thrown : " + e);
+        }
+
+        catch (IllegalArgumentException e) {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListToArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListToArray.java b/Methods/src/ListDataStructure/ArrayListToArray.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListToArray.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,25 @@
+package ListDataStructure;
+
+import java.util.*;
+public class ArrayListToArray {
+
+    public static void main(String args[])
+    {
+        ArrayList<String> fruitList = new ArrayList<>();
+
+        fruitList.add("Mango");
+
+        fruitList.add("Banana");
+
+        fruitList.add("Apple");
+
+        fruitList.add("Strawberry");
+
+        String[] array = fruitList.toArray(new String[fruitList.size()]);
+
+        System.out.println("Printing Array: "+Arrays.toString(array));
+
+        System.out.println("Printing List: "+fruitList);
+    }
+
+}
Index: Methods/src/ListDataStructure/ArrayListToArrayWithStramApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListToArrayWithStramApi.java b/Methods/src/ListDataStructure/ArrayListToArrayWithStramApi.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListToArrayWithStramApi.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,25 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListToArrayWithStramApi {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> al = new ArrayList<Integer>();
+
+        al.add(10);
+
+        al.add(20);
+
+        al.add(30);
+
+        al.add(40);
+
+
+        int[] arr = al.stream().mapToInt(i -> i).toArray();
+
+        for (Integer x : arr)
+            System.out.print(x + " ");
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListTrimToSize.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListTrimToSize.java b/Methods/src/ListDataStructure/ArrayListTrimToSize.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListTrimToSize.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,29 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+
+public class ArrayListTrimToSize {
+
+    public static void main(String[] args)
+    {
+        ArrayList<Integer> arr = new ArrayList<Integer>(9);
+
+        arr.add(2);
+
+        arr.add(4);
+
+        arr.add(5);
+
+        arr.add(6);
+
+        arr.add(11);
+
+        arr.trimToSize();
+
+        System.out.println("The List elements are:");
+
+        for (Integer number : arr) {
+            System.out.println("Number = " + number);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListWithCapacity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListWithCapacity.java b/Methods/src/ListDataStructure/ArrayListWithCapacity.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListWithCapacity.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,31 @@
+package ListDataStructure;
+
+import java.util.*;
+
+class ArrayListWithCapacity
+{
+    public static void main(String[] args)
+    {
+        int n = 5;
+
+        ArrayList<Integer> arrlist = new ArrayList<Integer>(n);
+
+        for (int i = 1; i <= n; i++)
+        {
+            arrlist.add(i);
+        }
+
+        System.out.println(arrlist);
+
+        arrlist.remove(3);
+
+        System.out.println(arrlist);
+
+        for (int i = 0; i < arrlist.size(); i++)
+        {
+            System.out.print(arrlist.get(i) + " ");
+        }
+
+    }
+}
+
Index: Methods/src/ListDataStructure/ArrayListlistIterator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListlistIterator.java b/Methods/src/ListDataStructure/ArrayListlistIterator.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListlistIterator.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,39 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+import java.util.ListIterator;
+
+public class ArrayListlistIterator {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<String> arrlist = new ArrayList<String>();
+
+            arrlist.add("A");
+
+            arrlist.add("B");
+
+            arrlist.add("C");
+
+            arrlist.add("D");
+
+            System.out.println("ArrayList: " + arrlist);
+
+            ListIterator<String> iterator = arrlist.listIterator();
+
+            System.out.println("\nUsing ListIterator:\n");
+
+            while (iterator.hasNext())
+            {
+                System.out.println("Value is : " + iterator.next());
+            }
+        }
+
+        catch (NullPointerException exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArrayListlistIteratorWithIndex.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArrayListlistIteratorWithIndex.java b/Methods/src/ListDataStructure/ArrayListlistIteratorWithIndex.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArrayListlistIteratorWithIndex.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,39 @@
+package ListDataStructure;
+
+import java.util.ArrayList;
+import java.util.ListIterator;
+
+public class ArrayListlistIteratorWithIndex {
+
+    public static void main(String[] argv) throws Exception
+    {
+        try
+        {
+            ArrayList<String> arrlist = new ArrayList<String>();
+
+            arrlist.add("A");
+
+            arrlist.add("B");
+
+            arrlist.add("C");
+
+            arrlist.add("D");
+
+            System.out.println("ArrayList: " + arrlist);
+
+            ListIterator<String> iterator = arrlist.listIterator(2);
+
+            System.out.println("\nUsing ListIterator" + " from Index 2:\n");
+
+            while (iterator.hasNext())
+            {
+                System.out.println("Value is : " + iterator.next());
+            }
+        }
+
+        catch (IndexOutOfBoundsException e)
+        {
+            System.out.println("Exception thrown : " + e);
+        }
+    }
+}
Index: Methods/src/ListDataStructure/ArraytoList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/ArraytoList.java b/Methods/src/ListDataStructure/ArraytoList.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/ArraytoList.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,24 @@
+package ListDataStructure;
+
+import java.util.*;
+public class ArraytoList {
+
+    public static void main(String[] args) {
+
+        String[] array={"Java","Python","PHP","C++"};
+
+        System.out.println("Printing Array: "+Arrays.toString(array));
+
+        List<String> list=new ArrayList<String>();
+
+        for(String lang:array)
+        {
+            list.add(lang);
+        }
+
+        System.out.println("Printing List: "+list);
+
+    }
+
+}
+
Index: Methods/src/ListDataStructure/CustomArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/ListDataStructure/CustomArrayList.java b/Methods/src/ListDataStructure/CustomArrayList.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/ListDataStructure/CustomArrayList.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,99 @@
+package ListDataStructure;
+
+import java.util.AbstractList;
+import java.util.Arrays;
+import java.util.List;
+
+public class CustomArrayList<E> extends AbstractList<E> {
+    private int size = 0;
+    private static final int DEFAULT_CAPACITY = 10;
+    private Object elements[];
+
+    public CustomArrayList()
+    {
+        elements = new Object[DEFAULT_CAPACITY];
+    }
+
+    public CustomArrayList(int capacity)
+    {
+        elements = new Object[capacity];
+    }
+
+    @Override
+    public int size()
+    {
+        return size;
+    }
+
+    @Override
+    public E get(int index)
+    {
+        if (index >= size || index < 0)
+        {
+            throw new IndexOutOfBoundsException("Index: " + index + ", Size " + index);
+        }
+
+        return (E) elements[index];
+    }
+
+    @Override
+    public void add(int index, E element)
+    {
+        if (index > size || index < 0)
+        {
+            throw new IndexOutOfBoundsException("Index: " + index + ", Size " + index);
+        }
+
+        ensureCapacity();
+
+        for (int i = size - 1; i >= index; i--)
+        {
+            elements[i + 1] = elements[i];
+        }
+
+        elements[index] = element;
+
+        size++;
+    }
+
+    @Override
+    public E remove(int index)
+    {
+        if (index >= size || index < 0)
+        {
+            throw new IndexOutOfBoundsException("Index: " + index + ", Size " + index);
+        }
+
+        Object item = elements[index];
+
+        for (int i = index; i < size - 1; i++)
+        {
+            elements[i] = elements[i + 1];
+        }
+
+        size--;
+
+        return (E) item;
+    }
+
+    private void ensureCapacity()
+    {
+        int newSize = elements.length * 2;
+
+        elements = Arrays.copyOf(elements, newSize);
+    }
+
+    public static void main(String[] args)
+    {
+        List<Integer> list = new CustomArrayList<>();
+
+        list.add(1);
+
+        list.add(2);
+
+        list.add(3);
+
+        System.out.println("CustomArrayList: " + list);
+    }
+}
+
Index: Methods/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Main.java b/Methods/src/Main.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Main.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,5 @@
+public class Main {
+    public static void main(String[] args) {
+        System.out.println("Hello world!");
+    }
+}
\ No newline at end of file
Index: Methods/src/Sorting_Algorithm/BubbleSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/BubbleSort.java b/Methods/src/Sorting_Algorithm/BubbleSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/BubbleSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,50 @@
+package Sorting_Algorithm;
+
+import java.util.Collection;
+import java.util.Iterator;
+
+public abstract class BubbleSort implements Collection
+{
+    public static void main(String[] args) {
+
+        int[] intarray = {20, 40, 10, 3, -27, 76, 37};
+
+        try
+        {
+            for (int unsortedArrayindex = intarray.length - 1; unsortedArrayindex > 0; unsortedArrayindex--)
+            {
+                for(int index = 0; index < unsortedArrayindex; index++)
+                {
+                    if(intarray[index] > intarray[index + 1])
+                    {
+                        swap(intarray, index, index + 1);
+                    }
+                }
+            }
+
+            for (int index = 0; index < intarray.length; index++)
+            {
+                System.out.println(intarray[index]);
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+
+    public static void swap(int[] arr, int i, int j)
+    {
+        if(i == j)
+        {
+            return;
+        }
+
+        int temp = arr[i];
+
+        arr[i] = arr[j];
+
+        arr[j] = temp;
+    }
+}
Index: Methods/src/Sorting_Algorithm/CountingSortForNegative.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/CountingSortForNegative.java b/Methods/src/Sorting_Algorithm/CountingSortForNegative.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/CountingSortForNegative.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,63 @@
+package Sorting_Algorithm;
+
+import java.util.Arrays;
+
+public class CountingSortForNegative {
+
+    static void countSort(int[] arr)
+    {
+        int max = Arrays.stream(arr).max().getAsInt();
+
+        int min = Arrays.stream(arr).min().getAsInt();
+
+        int range = max - min + 1;
+
+        int count[] = new int[range];
+
+        int output[] = new int[arr.length];
+
+        try
+        {
+            for (int i = 0; i < arr.length; i++)
+            {
+                count[arr[i] - min]++;
+            }
+
+            for (int i = 1; i < count.length; i++)
+            {
+                count[i] += count[i - 1];
+            }
+
+            for (int i = arr.length - 1; i >= 0; i--)
+            {
+                output[count[arr[i] - min] - 1] = arr[i];
+
+                count[arr[i] - min]--;
+            }
+
+            for (int i = 0; i < arr.length; i++)
+            {
+                arr[i] = output[i];
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
+    }
+
+    // Driver code
+    public static void main(String[] args)
+    {
+        int[] arr = { -5, -10, 0, -3, 8, 5, -1, 10 };
+
+        countSort(arr);
+
+        for (int i = 0; i < arr.length; i++)
+        {
+            System.out.print(arr[i] + " ");
+        }
+    }
+}
Index: Methods/src/Sorting_Algorithm/CountingSortNonStable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/CountingSortNonStable.java b/Methods/src/Sorting_Algorithm/CountingSortNonStable.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/CountingSortNonStable.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,46 @@
+package Sorting_Algorithm;
+
+public class CountingSortNonStable {
+
+    public static void main(String[] args) {
+
+        int[] arr = {2, 4, 5, 6, 8, 2, 9, 8, 10};
+
+        countingSort(arr, 1, 10);
+
+        for (int index = 0; index < arr.length; index++)
+        {
+            System.out.println(arr[index]);
+        }
+    }
+
+    public static void countingSort(int[] arr, int min, int max)
+    {
+        int[] count = new int[(max - min) + 1];
+
+        try
+        {
+            for (int i = 0; i < arr.length; i++)
+            {
+                count[arr[i] - min]++;
+            }
+
+            int j = 0;
+
+            for (int i = min; i <= max; i++)
+            {
+                while (count[i - min] > 0)
+                {
+                    arr[j++] = i;
+
+                    count[i - min]--;
+                }
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/Sorting_Algorithm/InsertionSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/InsertionSort.java b/Methods/src/Sorting_Algorithm/InsertionSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/InsertionSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,37 @@
+package Sorting_Algorithm;
+
+public class InsertionSort {
+
+    public static void main(String[] args) {
+
+        int[] intarray = {20, 40, 10, 3, -27, 76, 37};
+
+        try
+        {
+            for (int unsortedArrayindex = 1; unsortedArrayindex < intarray.length; unsortedArrayindex++)
+            {
+                int newelement = intarray[unsortedArrayindex];
+
+                int index;
+
+                for (index = unsortedArrayindex; index > 0 && intarray[index - 1] > newelement; index--)
+                {
+                    intarray[index] = intarray[index - 1];
+                }
+
+                intarray[index] = newelement;
+
+            }
+
+            for (int index = 0; index < intarray.length; index++)
+            {
+                System.out.println(intarray[index]);
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/Sorting_Algorithm/MergeSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/MergeSort.java b/Methods/src/Sorting_Algorithm/MergeSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/MergeSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,60 @@
+package Sorting_Algorithm;
+
+public class MergeSort {
+
+    public static void main(String[] args)
+    {
+        int[] arr = {20, -13, 25, 7, 18, -45};
+
+        mergeSort(arr, 0, arr.length);
+
+        for (int index = 0; index < arr.length; index++)
+        {
+            System.out.println(arr[index]);
+        }
+    }
+
+    public static void mergeSort(int[] arr, int start, int end)
+    {
+        if((end - start) < 2)
+        {
+            return;
+        }
+
+        int mid = (start + end) / 2;
+
+        mergeSort(arr, start, mid);
+
+        mergeSort(arr, mid, end);
+
+        merge(arr, start, mid, end);
+    }
+
+    public static void merge(int[] arr, int start, int mid, int end)
+    {
+        try
+        {
+            int i = start;
+
+            int j = mid;
+
+            int tempindex = 0;
+
+            int[] temp = new int[end - start];
+
+            while (i < mid && j < end)
+            {
+                temp[tempindex++] = arr[i] <= arr[j] ? arr[i++] : arr[j++];
+            }
+
+            System.arraycopy(arr, i, arr, start + tempindex, mid - i);
+
+            System.arraycopy(temp, 0, arr, start, tempindex);
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/Sorting_Algorithm/QuickSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/QuickSort.java b/Methods/src/Sorting_Algorithm/QuickSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/QuickSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,60 @@
+package Sorting_Algorithm;
+
+public class QuickSort {
+
+    public static void main(String[] args) {
+
+        int[] arr = {20, -13, 25, 7, 18, -45};
+
+        quickSort(arr, 0, arr.length);
+
+        for (int index = 0; index < arr.length; index++)
+        {
+            System.out.println(arr[index]);
+        }
+    }
+
+    public static void quickSort(int[] arr, int start, int end)
+    {
+        if((end - start) < 2)
+        {
+            return;
+        }
+
+        int pivotindex = partion(arr, start, end);
+
+        quickSort(arr, start, pivotindex);
+
+        quickSort(arr, pivotindex + 1, end);
+    }
+
+    public static int partion(int[] arr, int start, int end)
+    {
+        int pivot = arr[start];
+
+        int i = start;
+
+        int j = end;
+
+        while(i < j)
+        {
+            while (i < j && arr[--j] >= pivot);
+
+            if(i < j)
+            {
+                arr[i] = arr[j];
+            }
+
+            while (i < j && arr[++i] <= pivot);
+
+            if(i < j)
+            {
+                arr[j] = arr[i];
+            }
+        }
+
+        arr[j] = pivot;
+
+        return j;
+    }
+}
Index: Methods/src/Sorting_Algorithm/RadixSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/RadixSort.java b/Methods/src/Sorting_Algorithm/RadixSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/RadixSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,59 @@
+package Sorting_Algorithm;
+
+public class RadixSort {
+
+    public static void main(String[] args) {
+
+        int[] radixArray = { 4725, 4586, 1330, 8792, 1594, 5729 };
+
+        radixSort(radixArray, 10, 4);
+
+        for (int i = 0; i < radixArray.length; i++)
+        {
+            System.out.println(radixArray[i]);
+        }
+    }
+
+    public static void radixSort(int[] input, int radix, int width)
+    {
+        for (int i = 0; i < width; i++)
+        {
+            radixSingleSort(input, i, radix);
+        }
+    }
+
+    public static void radixSingleSort(int[] input, int position, int radix)
+    {
+        int numItems = input.length;
+
+        int[] countArray = new int[radix];
+
+        for (int value: input)
+        {
+            countArray[getDigit(position, value, radix)]++;
+        }
+
+        for (int j = 1; j < radix; j++)
+        {
+            countArray[j] += countArray[j - 1];
+        }
+
+        int[] temp = new int[numItems];
+
+        for (int tempIndex = numItems - 1; tempIndex >= 0; tempIndex--)
+        {
+            temp[--countArray[getDigit(position, input[tempIndex], radix)]] = input[tempIndex];
+        }
+
+        for (int tempIndex = 0; tempIndex < numItems; tempIndex++)
+        {
+            input[tempIndex] = temp[tempIndex];
+        }
+
+    }
+
+    public static int getDigit(int position, int value, int radix)
+    {
+        return value / (int) Math.pow(radix, position) % radix;
+    }
+}
Index: Methods/src/Sorting_Algorithm/Recursion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/Recursion.java b/Methods/src/Sorting_Algorithm/Recursion.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/Recursion.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,33 @@
+package Sorting_Algorithm;
+
+import java.math.BigInteger;
+
+public class Recursion {
+
+    public static BigInteger factorial(BigInteger number)
+    {
+        if(number.equals(BigInteger.ONE))
+        {
+            return BigInteger.valueOf(1);
+        }
+        else
+        {
+            return number.multiply(factorial(number.subtract(BigInteger.ONE)));
+        }
+    }
+
+    public static void main(final String... arguments)
+    {
+        try
+        {
+            int number = 100000;
+            System.out.println("Factorial of " + number + "  : " + factorial(BigInteger.valueOf(number)));
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+
+}
Index: Methods/src/Sorting_Algorithm/SelectionSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/SelectionSort.java b/Methods/src/Sorting_Algorithm/SelectionSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/SelectionSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,50 @@
+package Sorting_Algorithm;
+public class SelectionSort {
+
+    public static void main(String[] args) {
+
+        int[] intarray = {20, 40, 10, 3, -27, 76, 37};
+
+        try
+        {
+            for (int unsortedArrayindex = intarray.length - 1; unsortedArrayindex > 0; unsortedArrayindex--)
+            {
+                int largestindex = 0;
+
+                for(int index = 1; index <= unsortedArrayindex; index++)
+                {
+                    if(intarray[index] > intarray[largestindex])
+                    {
+                        largestindex = index;
+                    }
+                }
+
+                swap(intarray, largestindex, unsortedArrayindex);
+            }
+
+            for (int index = 0; index < intarray.length; index++)
+            {
+                System.out.println(intarray[index]);
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+
+    public static void swap(int[] arr, int i, int j)
+    {
+        if(i == j)
+        {
+            return;
+        }
+
+        int temp = arr[i];
+
+        arr[i] = arr[j];
+
+        arr[j] = temp;
+    }
+}
Index: Methods/src/Sorting_Algorithm/ShellSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/ShellSort.java b/Methods/src/Sorting_Algorithm/ShellSort.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/ShellSort.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,40 @@
+package Sorting_Algorithm;
+
+public class ShellSort {
+
+    public static void main(String[] args) {
+
+        int[] intarray = {20, 40, 10, 3, -27, 76, 37};
+
+        try
+        {
+            for (int gap = intarray.length / 2 ; gap > 0 ; gap /= 2)
+            {
+                for (int unsortedArrayindex = gap; unsortedArrayindex < intarray.length; unsortedArrayindex++)
+                {
+                    int newelement = intarray[unsortedArrayindex];
+
+                    int index;
+
+                    for (index = unsortedArrayindex; index >= gap && intarray[index - gap] > newelement; index--)
+                    {
+                        intarray[index] = intarray[index - 1];
+                    }
+
+                    intarray[index] = newelement;
+
+                }
+            }
+
+            for (int index = 0; index < intarray.length; index++)
+            {
+                System.out.println(intarray[index]);
+            }
+        }
+
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+}
Index: Methods/src/Sorting_Algorithm/SortUsingJdk.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Methods/src/Sorting_Algorithm/SortUsingJdk.java b/Methods/src/Sorting_Algorithm/SortUsingJdk.java
new file mode 100644
--- /dev/null	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
+++ b/Methods/src/Sorting_Algorithm/SortUsingJdk.java	(revision b776ce19b8846523570783c20d5795f0fdb9b315)
@@ -0,0 +1,18 @@
+package Sorting_Algorithm;
+
+import java.util.Arrays;
+
+public class SortUsingJdk {
+
+    public static void main(String[] args) {
+
+        int[] array = { 4725, 4586, 1330, 8792, 1594, 5729 };
+
+        Arrays.parallelSort(array);
+
+        for (int i = 0; i < array.length; i++)
+        {
+            System.out.println(array[i]);
+        }
+    }
+}
diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/target/classes/org/example/ContainsAll.class b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/target/classes/org/example/ContainsAll.class
new file mode 100644
index 0000000000000000000000000000000000000000..cb8f77ba15222bb1f77e0092784d4ef6f3d4f66a
GIT binary patch
literal 986
zc${@oYj4s}7=8|AluLCR3?@3==Dcuobvm61bIHQ8_@Q1R3&#2B01cd_v{+grKTAKj
zOcQ^AAN@hb_p~6O*e2(_J@5NI=V^cZ`uZKf9-btjVO_;W5)rJ&v6;e6Y{hXaj@t>`
z!Ce^_k|?62qO79A5Zf2F@D3Q1Lb1URtvPLzVbKt_`NHotP4|R1Ey|<~r^T%XcZG~c
z$*9*A1BSfexE<a6$a{Uu)N79IabXV*Evrh99{CKp!aL)Pf8e^s?T%jeTw!;r!9wnK
zXhddCnIYM7EX!<p!jU6FgzpK9c8v3cN=;BZ5;jA0*dLQE&F$a+ckhARTz7o8WgZLJ
zxiod9Z3)+K36~jGCIb&$mk*E3_ddbn&qR;ggRZaQo`!Acbjx~|_sF~!9#?T+!ww#3
zc!*sUk2E~S9>eN?G^F(thA*3EM0;j)ZAv1Ax7!Tag7J4pwRk!+r#>8bCJ|B`pQdF)
zym0haB!EXUn7kJXJ4GX3nEwIf=**k}3~FCS77>dUPKym}B1QkFd?H{{LOK^I(#bNi
z3#D_gPeFN!&RCF)VVO=X1R#wJ*#uUQ9X0=iLN9Rg4UxC!P>gaqdVz%q-jvg^v7?60
z2=cr#hE&Fo${6w)@p9z?i3q+RDY+;CmlBe}-Z))hnW$f--CN|9iO()^d5TpWBab>&
pB;SpY6LORXbs4xqRYv$CA@X#?Yn0EC4Qp$EYHNWw*8>%9{01z0+S>pC

diff --git a/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/target/classes/org/example/ContainsAll_nullPointer.class b/Methods/src/Collection_Interface_Methods/Contains_Method/ContainsAll/target/classes/org/example/ContainsAll_nullPointer.class
new file mode 100644
index 0000000000000000000000000000000000000000..d89d8cdaa7c0c7ec72c03e21bf0a164906ba9dc0
GIT binary patch
literal 1112
zc$|$>ZBx@g5Pq&LB!nnXD2k#|5N&BC;tQy)Fj&U%Llwq4IN}HAC}%n5n$$F5<Y(yz
z5uEV{_@f;6k^&-iG?}@*+k1AOXLpkyKM%hHSiq8nbI2N)w2(m7#8f}7W7@<G6E`j7
zknh6`3fft;a0{~r90Ru*ddt$4!6HL4mtSW{RlF_1Fi@4Qco8-?h5w3gD)OYOUY)CT
z?n`~{I8(v4Y%@$(J-^|IkG$DZ!l`&}z@^(>R_dJ_Dz)ZGHxPb_;7#%~jON}}cla)M
z6n7g=E%2q=C`IJlZ&147F4qiJ-BU``1L^4$F(M44BEBO(q54lya~gI^^j_;o_)ORM
z@>$+R%31g)_=)E!!QBXL)x6NJi>FfajQ^z>vpUwsc?>X&oMd12eZIFMK7<r%K9f!E
zwzoqAb2jeaF7>Cj&6{Li%77cVXX8HR4J_DrfQL37p=6+J<1uKOQ~xm$hQX5(RyTL3
zu2X6%zcoC`x3(BEx$2)0rThlN(3w^+7`t4BV)ebA_eQ=;vrf_1_S%7<+LB&KA~G>t
zdd?b6A)r|Z-i)VvTnWQiuKQP@6%BVuK$=?mq)1(gG_4~GoBkU8B*64EXdR@JLza>4
znb`;X6kQL|+8a4jNYiS^01RV<Y#%Zh?F1hpNiVSS4T(4VNLCB!)B$=DcwI>M9&L<x
z(}6rMroO_AU7yicC?3E{;0yXScQWFhgh{JOuSI7Ymq_ju@fAqTJZY$q0<CKz=EenF
ijPPZQ5tcq;vX^O>z&QCw$;NkAj_<BUO}G|SJMjxsj|nIM

diff --git a/Methods/src/Sorting_Algorithm/Recursion.class b/Methods/src/Sorting_Algorithm/Recursion.class
new file mode 100644
index 0000000000000000000000000000000000000000..93e9f654b8aba10e4f471c906d975c64ef1e474a
GIT binary patch
literal 503
zc$`I0%TB^T6g@*r3zbI|M8&vp2b##ng^9+*7)?k}6Ct{AVTMwn2ra3D@mu@>H*DCb
zap4E}QO46kq)q0|+&Qm1Kfhn!0QOO~V4z?jiK2;B3mQr$)=aDm7)PG(sbc}HQoRw-
zPlJvtkZ*XtdpRDq-LNIw19tSG^n8I*<*w0}&$2d<ez(?Cq33rGBVx9xr1N+oM=_o*
z0_g|os37#@fb>eeS{JaI!8ml>b1#z2UAxXWeDVT+FOtl_L@I+kY=OeU<Lt$8M~a{f
zHjon7YzCpC>;1`~OL5g3*8X(_>;>_v-FF?uSw;-0;&`o4Ixe>P4hEu6gNRJIrg_?8
z6|Bjf4~Qu@%*)k?n;IcY$jqS))&y(bwm*@$eM73T`wo2?Lk&VSUPt5-y}+}<xzeOt
z$nm$4W!FTaZX&1if<w=h58_Z%F25qFPs(MzLx<jkt(jtu0H6q++6JE_JDVd)xg3L5
F{s75#R>c4S

diff --git a/out/production/Contains_Method/ArrayDequeContains.class b/out/production/Contains_Method/ArrayDequeContains.class
new file mode 100644
index 0000000000000000000000000000000000000000..d053ee68a3cc451a57e54e1583448edea848656f
GIT binary patch
literal 1815
zc$|$@YgZdp6y28qlMaE@@bZB*B5lLN#z$2o6m7#JXhN|mAfUFF<Sv*pnTazuUGh)-
z2Y#*}+9j^#5Aa8|?wLtVXvQu-<lb}6J&(Q5J#+K-^Ygy|e1V51GFUM1p@}{$BynR1
zv&bj$Q4$|t!YBAN6S$dJ#FxRzQU(Ic25y-c#)^TjOr-I(f!hY|2n;S;j-^)w61mx3
zf&QXfR|4s><*2Pz<4Ae;<&jNGrtH?Fy(>K{(A&m-ePa0nW98ePC(l;Z&n;DS9W5=#
zFYvTML0}?xSbiiQ%e*a}<9t<nmUCPPY7KhIZ`oQv9Pr0<SGxR)w)Fj?^!3^=HPzIX
z>o8-s%VDc!+uN??XytXg^h@uUkVa!_vSM95AVy+}PFvct^F`OTRjnO9agpX(^Ci`}
z*ofucDl5z~T-CC6T9M5#*ub=bqJUX-TV74ATS30b-j>}6a-}eeF}Ac*t>Y*#P*S$-
zrm%`N-q_~#204{fLps{PdI}pT30%J8y4u&CY*v&$aqE715SvMSlft(s8>pnPg}W(i
zV=amA0^>b_sn<0=g(~jzc3$866m|lyOfN4&>V)1sdc@XUAlPXqImvomU_4iTHKH(k
za3N3i%-4$a6K;#y#v^~r&2RG(G_OL*M#01`_IMi|NK0A4);Hv70InwWo~2JH`I;Rh
z&beItT+GG|(`Zad0izjcw(|;!uCY(n{_RV4)6YiNmu>Q6P~0sit4~z6Z239_JDxj;
zt!^GGT~WR-k2w}&xmcg1b|cxq_rXQ~ATZN$vz*87scL&i?O2yJ?RsYhe&Sq}UH7!r
z6i974j`G5>P{jOeH?4M#XwXX1soTn*i2@6~i2f@u_{?J54`YU)H$_p}cGc3VVBmqk
z)&GU<!Z64A;eEV;;28y<SP^`ZT*s;9xeM+CbI%~2gvS$H2SZ~5lU!4g1Kz}2+%Ms6
zyb}eBYxGXgCjUg={xc-X^O^oXFwlp+`OM%;!H9(4k(@tgG@il?jYEC7MdQ>t3k1gB
zFjb+x@DwAVHqzEEQ+vWfNj?%AeDQ;QhcAAA2y_V}Tn$=>$Z(k8()fT<o*Wkma+S<C
z2)snl_bBh+3O}MO9%4Eqcay{xiC_xvvPKCe&)=i88%kM9q{p~v?n&%3_YBEjZMP+|
zT%&ZImPsUDuvnjgoWcJoVPLpoAZ@Zob75!aamd}I`#yfe0b$*wKEjjFX!|@|3;zJa
CR?4*i

diff --git a/out/production/Contains_Method/ArrayListContains.class b/out/production/Contains_Method/ArrayListContains.class
new file mode 100644
index 0000000000000000000000000000000000000000..9dbc607d3e8423843bc3d108090bbc99d487228c
GIT binary patch
literal 2059
zc$|$@ZC4vb6n-XzY*?1^4pt+kN^Mf0sjt-r&=QM8lYmVH8+;p*Az9e$=Il-=9KY$G
z&|l!^_CqUpj>pgb3;%}a_;P1A5+G}joWsn$cb@z9%$@9Sf1UgS;1(Pm6S%42H60P$
z)G>h92QiN~)bi#a7Vwr@-qvty0Po=4F>+ecv5fZ=;QcW$tZ2yT7{&)0?&=uDs)i3W
ztTDtEP1}^q41KBeCPOsm)C9wD!L&uG-P{rGeZFInWvt*-xwXk%Q|TRJR5nbHVZ3n1
zb@@@j^kmMlB{yv^ONUJo7^YI&g*|@2GZwe&nX+_EyPj34VzwV&xp&X=wiI>Yl6%Y*
zUfYrktU~{kY~~CsXK~NVaZlbotcsR29h*FoX8@(PWo<YnMRU(WqTH>kf<sDT(75Yb
z)C1KV9Ji%uWpa*XiE77x>O2cat$&%A3-wqG>1>(843#CX?iYE>_tuct@DYPvcG_-L
ztePs|R1c*$R4fCNn4$){*-mi=K1RVn5hVlb*f8)3?incKKEr5F85%w{u!${(krl_0
zo^*MuC}hK_dBZV$7RLhv6>Mwx+`t$3(!f_J#qqT=a)!jSZo<G0s&rk?z6=93g&OT?
zlPc<ZuJ7y-lMEAK?9xzn&3OvWr9<PS9dN5H)_2wD<<p_F)yHc!hRIanVy0}GhAnQM
z#+pi{3%xnitTeb+5{J@%H{=twePtq*?u~h_qw<j_MU&i|HsL1&wCQ9vXb2^ZqTtP}
z4go4(4<2B0Dajb7n|xmoM^!GjOxYmGliZd>*R@ngkLj=h9}h`Jt+bS8*%t^o^HSs0
z)4NILz2ur`Qs!if9;l$*w3D(SlIjj`t4b$RmC)>ZUC5&FJYE+Ui8{r^r4z^+>T1^Z
z8D_gM(>`$aMF$;lvC6A-Ax9dhkyycT_S-E6BX8Tn^(RwM&EKDGs}m!b^)+tSEaA-t
zj@jOd{>xFl{1Etd$Uyam$Z^Xm(~M;`5b0O{S8eCsQy30cFisx{^%tSvd-|22b(*vc
z?Tq&R>rcTR`Nz-E8uN{PxJ;`N0Ps9spnU)dycjsM3ZbK9`|f8%9y~=~VJ`X;qQ~fu
zU~8_wE5^FwF=7nG`D17dKOjLuoZ(jtlpaH0IKd$B1jdhl|31f#F%-cPnG+|t6qu1H
zl0N?gBffU2qm7aFh)RiL7bbnh)c%mZVo|@96^ziTk#&$b7{Ux8(sY_5ZJju|M_g10
zxr<ryPGFA^lH`ZP*&$xRx47!luuP=nh>RJ$M8s4`N)jSMcpWbjE<$J}&5}fvkk_lU
z$MFrWAw`6xJ5&ai>m<#QWg7i|s&DtahJ`<HWmCg&QNyTCDQ@_;k)Z^jzzhvoRN!UY
PCjAnfWXZPZuXp|dG|>^2

diff --git a/out/production/Contains_Method/LinkedListContains.class b/out/production/Contains_Method/LinkedListContains.class
new file mode 100644
index 0000000000000000000000000000000000000000..b2d6127cf08f8a2b5cfd2fce2eb336a69aaa113c
GIT binary patch
literal 1818
zc$|$@*>)R65WOwQ9%U?BLEczQ7>tw13lU2IV>t$**p@+ZOymXIENM%9?1@G*I+|9%
zf5IQ|93GN`IfoD6qkuaz3X&s{!-Kl3s&7@@s;+7M`PaoC06xJ(6B#TSc-KS>OG(@s
z!8~$FyqCoLSMUKo%mgqK%lI@nS;;_P)xaGSqgXTWnTa$$H}Hjly8^?jwrlG(fp~U)
zUm#KNYDyqovR$>^Zk(vrt~_yQ$&|dRboOP-4)l&Oq0ekzV4_5LUDZmquM3{5rS1B8
zo;D~5Ol6NtkK|*SbEJEktLT>Pp5}vG!!6~v9W5Y^_+z+hJ-C7+eZL@mz5Y{GHMQ-z
zjA-=$w%d-g<JqoOtzJk%woXZDd_YbfI%G&j(OFyDPOjiNj;eN?r!E(H-h5u@!a$GJ
z{v2zJGFs8HS})6H=xkutKtaH)c<okIZP-D)>Hdb@3Sy-&jtMrjo2?5J7%D2q@lv>l
zb>7$3%?5i|R1N8B0~;x9q9}0nuIFiAw`8-d^qE)l)5F+G;>#4iLdifmg>BqVVF&9;
zd>t4c2+X{!?I~2S%e#4b=Tq1VP?`R^NU7_3|Kt%{cd5W`J6V&g)dVK9r58Q&^GBEB
zRL*^^Sbp4VGumW?x4qmBFG2Gvlx*Zp?BjrxcF&aMsvoU@lx6!XmSF!IvaZOmD)oV_
z&nWqtZ6w)+?BL;;A2d(n1M&(O%|LV97b@wQ{ABgt=2%<472ToL<oBSs+peX_Ip7<T
zoy;B$%x<14T~@v?PdQN&*@2j(_9EH9H^FUxD=^oE+3sVnt~%(b9UHQ$z1F#b?>Ss0
z&#Ska0;w(6RjqI~6gmIgTUIAVG;Kxc)*R)}MUMG?M*rm)d}{;X#{(vzKSV(~PQ}(L
zZ{P=k>;H?}rHLMd!`pZT!AlChvLg5{xlU5caTnZ&7M?*o36H0^4u{4Brn#mf0A9sw
z+^^tuyb(Ez8$`!xlfNT&_zdyVVkYq$hGIBa%nUylj7azu$;AtL<0;J0I1<Ah8fPw;
zATa)dnKJdIrx**hv5t0?+7l*9@}=11qaW;heDo6`(G`qwHE11Sg`*^w#yga9tZ|tn
z@3Hbt5-*bU1Il~2#xKdjL(GQ7-DY9SWH5s_nWG4k=WkKk4<(Bd%cI{c_aqJ(dyd6l
z@3bYd+@N%mmTAQQX0n)ptiiu3VPLduAZ@Zo3t?v$am?K${1D&ah_r4~ALGeKw0#_|
G`F{YHYRggp

diff --git a/out/production/Max_Method/MaxClassCast.class b/out/production/Max_Method/MaxClassCast.class
new file mode 100644
index 0000000000000000000000000000000000000000..9aa1af40a45a26c7ae6b5fed6ec9059ed2abc317
GIT binary patch
literal 1909
zc$|$@T~`}L7=DI?Y*>~+1GIkBnpTPl&_)ppHi+632zCS2K(VEM49Q5g+3e)(PAL2n
z|AE)_!nSyh$7_F-$9H#QNyti@i<x=9pZD2!CV&5P@+W{r?CZFIoQ4@41IX!^#at3M
zhH(>l4Id5RW6bOL1Pf{MUefUyZfhu{!SK0;6@ULi!<QPqVn{4oj-^%@V%gjShImod
z1jDFlIbyTj+!yXP-?vGVHf5FD54dajaz`0gb<1N&nPq-dw7KUMxu*)GZ*t3FxR~8D
zpYTJTx4CnWuPE1Y4hlgP+wv5{SZHl4%g&ot5XmgR)M?Px{u5CR3{>t)m*G{p)uXCt
zDN8!!bge7lrmVE9^;KImh125{=k5W49*@9AkbB!aZvEHl)ETVH{n0BFKT=V=+9>l@
zCrq!%wp$fzmM>iBrs<|1Zy=3vhKcUnPD9lE3L5ShDB>=|U`g1v)Uaw`4eP|)+0q(H
z1~%}uhI<A~l*#3el*&^sZ<U3r%bGWuz-AI#2JYh<4c{85V4LCcd4wjh<Ga)M%Dj$N
z-*1<}=x(qFXZRh7f>YIoqr`!58MH%gx5d`a{=jVH%svmIHPuT#O)Ia}7$&p*qmp~n
zOVF{WM3Vw!o5ChTe@o`?6K{&x6TC_JCr|SirEOClYKn#=*5pSFGg&jrUdZ)V*YO=5
z()}SKGC^Az%e$Rn440a`A&Szea<yxzI-NYl9Yr;!vk{jhYBt9suoHVNU$UJuY;@hW
ziC3Q~qw21F>SO{$^V##SQzV94+1FpOh(HaG{1N$q?$N2uat>ufbX-De)_7G(_gKSE
z^fH-JHrg$kstv~xZh%k_U%zzY?&JuEyu_WFExf5Pu+R_V{{sDc9^t+hF<t#Birls<
zmJ-w?XSn`G*yt@g-w#(YMo+x|8=&W!UI|(!NXpaBXdj$;4)!cCPtuwQlrdbS)d(GM
z32)Ipgtzfd7|asn9V6Y&9~gM}95Hij<^|&A+4SH`BnGfMJNFl~@c0{&voA12@(Fa{
zcMSiEjOlAnFw&97I`U{BKcnQp0{uG~!M=_Z;sLn%K%*f^U{V++U?aFjQ40iYk$PJq
zaChmvPL>kE-Nw5?BMa0-5_2S7rUp`&#(TIzRhB5<`^b>46r8RG4ewCS4``q2P!L95
tr_(fPh7o(J!PwG}GKhl@1Lm^$o_3vF_V6PfQ|V7hPLbsn=@x@^`CrXp@ag~n

diff --git a/out/production/Max_Method/MaxMethod.class b/out/production/Max_Method/MaxMethod.class
new file mode 100644
index 0000000000000000000000000000000000000000..0e1cbc10dbe906dfba6510c59e0e1c0fa5b8b87c
GIT binary patch
literal 1855
zc$|$?+jiST6y0OHR_rL3=F$Sa;FhG=PN|{L6zUM5&b3vNf<w|ayiDvNRxL|j(l{i4
z!XNNl9%u<`@d5l053I#vOE$5Sm=rx|=A1capMCaR{`mXocL4YCT^b{pHgGGA7^c&B
zAK5|VkWXO-x6}9lcg7fZH;s?+iGh1#5V&vP({TLEzykwCf#jU++In6fp3Q9uBuZXY
z35-~_tJYhMUFC1eU5B1A%d1FdOZs+bcbo}bvjc%aYfT=kDP8lbL`*cK?FwAV?pQD6
zzAQM>-7A!}Z@YWNsDxt&T41!j+S0aDu;^i?AmsI)q>>|ppd<smcu-MIZF??*ZuaD@
zd*xQ8w&<vaa!&*$q`yaE<9#TQ*~wN8oBy^meTvdtPxh*-)t>T;^8^?wYgwtU$z~@n
zUG`djMJ?H(F?_7WoiN+PC@u<2^dh@;RSoeC%$fKc^9H^!@g=@8@X$mF3kDWVEMb`<
zJ@h;sXkRwlkike2D+5?H@d%F%SSHr6E^zfc%?7X$hCdO=yh*t*?rVY6aSLS7h2GeG
zp(@<Di)U03F!rU>QXAig`@Wj%qZ@@eDK1Z(tg^sl);e9Hn0tPraQQIMs=)-W#k9$G
zyzLd9a6>h>RmleNC%gD1&vA&uj(7;-4S67t&szP~i@CGa)A$Bu-T|tRiQ3B8!Gnwt
zxZIF+Rr1`5)Z4bMaTaLlYSy^buZezVZ@dq8s@DuH$33M+&!w3--lL4J`Q8t1CSr6q
zd;WFl%V9SA<}1`E(ZFVSKAs9pb=Pcn->a)mNL!jES<#+<Xn>oTv^=lgY6_UEuB-fr
zp`u<t_VVsvv`^fMbgPaErrL?cvo!uIF}%lp!gtQ!m<~iqI!@WvicRkD9r$0|_*R`C
zhZ`8?108-bKDm4c_zz#?0!P8|LjD!R%V>F=|77HhV}gIP9e_z(;+Vo^ywy$?V~mc`
zr+!21*(=1Ynb>P2e#M0twr7m)bo8(8JaIhz8OfQ~Fpe+){DRa^$XKE42!kDav||rN
z_RFZ$0+x}E#%&TyL}X{f2pGgk(H_Kg+Ie<+k6kX{Dl;aqLh_rOZ{uw|#T8U>Eov@L
zi~-Ei`wp90A?6iE3C4u8Yf<Zpi0^XDbi`=K-{9;fJwu59iDd)n4Fjf0&EAVtoMI`E
Xs=&8+hAk!(Xb*GcL;607{<Hr8vDV?F

diff --git a/out/production/Max_Method/MaxNoSuchElement.class b/out/production/Max_Method/MaxNoSuchElement.class
new file mode 100644
index 0000000000000000000000000000000000000000..a4c4ccfabe1ba20db0d5fb37831138c33ef8279c
GIT binary patch
literal 1709
zc$|$?U31e`5Ir|Gk>dywl9-PG!O##K)5Ls##33!XNuekS)EyXx>BEh4Cl;1<J<@eZ
z{t5qpXLu-`bf(ki{s4YXr$@3|97he+gZA$3+1<0N)&29Yz25=c!H-!S!?cA<Sqxx$
z2s5~xMFF!Giem)KXHmjc3)jXVaKpmQNZzt=+rk}z!9~}1&5}T>F#B8}UD2CLV8n5K
zwbpKKsNg5L;n6bY=$iDN%fOBFt}$)uZW#Gi<<6R}wrllePc@Zq%Jem*>kFJHymDU4
zZCUc9zg4Q5!1cGvaV5_UjlgKf+cvIOa%f?sVCJcwpo%BMup&dVyi-#x<7%Ivi#>7s
zO80`&GT0)&@dOHFw!fp@)<0cM_fc9r7`?>!qg5kojaAv|hGna|9n{o{8!5T|iOfei
zY>Z%3V4^p_-%y)T6$^K5+{1!}vW-RD=V<!N()3Vk6PiG_R+Xvi&2VH8OBsA)<6Ati
z@X$sD-wB*OY<L+gNAMMa{Fg=;;l5|p{$}=ZTi<xCYWq#q-O#8ecS^VE$aUuD>e5qo
zVc3h3O%5>kxqL-?9+R*nKUb<LcLa(BC&^!)b^1$}vv`EZTw2o1Z%ePO@@}}07Xl}n
zvY{&4uSxU5HFcgsBYndfGlhh$Oxlw11nvS>E7CmfcP=Rr*L&jMA?8gz&~N;F%;<XI
z@WoE#aJ%s3WlspS@I&+g*SOK2eXhT)8>$QGjAljFj1G1!Jmq!ZXx(VH1nkGYuY#DN
z;=JDW^6uv7tl%T*Z+a@6?gW+(()h2y=#NW)zdHDRXAh>RNYAUfMzP6f0+;?5H{L3T
z<8T2-d6h=b0Pjftt9&1)R-zP?M~WXI-pB6fW*v-;DU9=NcL10`j&cYmaIzcxiRb~!
z@^2V;`4K7S1JYN1#gRWSxCaaP1(|oq$JRY$yZUHXw`2W%oL~~?m^hMi7)Cm#FcVuW
zWGE+D{2U{u*h7)$IhLO%xdl>+C>9x$Vbm#{CbcOdCvk?S`S^4;ZlKHzQ<UesEp_mD
so-WWbjMUE-hSn_%+wA*dJc+NcN|`0(3D)5-`4#HN==qwqx%hqkZ?TKO<NyEw

